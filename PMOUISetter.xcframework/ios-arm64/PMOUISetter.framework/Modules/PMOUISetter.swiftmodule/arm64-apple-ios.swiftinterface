// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios15.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PMOUISetter
import Foundation
@_exported import PMOUISetter
import Swift
import UIKit
import _Concurrency
extension UIKit.UIImageView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func image(_ image: UIKit.UIImage?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func tintColor(_ tintColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func contentMode(_ contentMode: UIKit.UIView.ContentMode) -> Self
}
extension UIKit.UICollectionView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func layout(_ layout: UIKit.UICollectionViewLayout) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func delegate(_ delegate: UIKit.UICollectionViewDelegate) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func dataSource(_ dataSource: UIKit.UICollectionViewDataSource) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func registerWithNib(_ cells: UIKit.UICollectionViewCell.Type...) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func registerWithNib(_ views: UIKit.UICollectionReusableView.Type..., forSupplementaryViewOfKind: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func scrollDirection(_ scrollDirection: UIKit.UICollectionView.ScrollDirection) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func estimatedItemSize(_ estimatedItemSize: CoreGraphics.CGSize) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func allowsSelection(_ allowsSelection: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func allowsMultipleSelection(_ allowsMultipleSelection: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setVerticalScrollIndicatorVisible(_ showsVerticalScrollIndicator: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setsHorizontalScrollIndicatorVisible(_ showsHorizontalScrollIndicator: Swift.Bool) -> Self
}
extension UIKit.UITextView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func text(_ text: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func font(_ font: UIKit.UIFont?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func textColor(_ textColor: UIKit.UIColor?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func textAlignment(_ textAlignment: UIKit.NSTextAlignment) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func isEditable(_ isEditable: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func isSelectable(_ isSelectable: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func attributedText(_ attributedText: Foundation.NSAttributedString) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func inputView(_ inputView: UIKit.UIView?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func inputAccessoryView(_ inputAccessoryView: UIKit.UIView?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func textContainerInset(_ textContainerInset: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func cornerRadius(_ cornerRadius: CoreGraphics.CGFloat) -> Self
}
extension UIKit.UITextField {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func text(_ text: Swift.String?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func textColor(_ textColor: UIKit.UIColor?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func font(_ font: UIKit.UIFont?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func textAlignment(_ textAlignment: UIKit.NSTextAlignment) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func borderStyle(_ borderStyle: UIKit.UITextField.BorderStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func placeholder(_ placeholder: Swift.String?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func adjustsFontSizeToFitWidth(_ adjustsFontSizeToFitWidth: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func minimumFontSize(_ minimumFontSize: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leftView(_ view: UIKit.UIView?, viewMode: UIKit.UITextField.ViewMode) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func rightView(_ view: UIKit.UIView?, viewMode: UIKit.UITextField.ViewMode) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func inputView(_ inputView: UIKit.UIView?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func inputAccessoryView(_ inputAccessoryView: UIKit.UIView?) -> Self
}
extension UIKit.UITableView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func rowHeight(_ rowHeight: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func delegate(_ delegate: UIKit.UITableViewDelegate) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func dataSource(_ dataSource: UIKit.UITableViewDataSource) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func registerWithNib(_ cells: UIKit.UITableViewCell.Type...) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func registerWithNib(_ views: UIKit.UITableViewHeaderFooterView.Type...) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sectionHeaderHeight(_ sectionHeaderHeight: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sectionFooterHeight(_ sectionFooterHeight: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func estimatedRowHeight(_ estimatedRowHeight: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func estimatedSectionHeaderHeight(_ estimatedSectionHeaderHeight: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func estimatedSectionFooterHeight(_ estimatedSectionFooterHeight: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func separatorStyle(_ separatorStyle: UIKit.UITableViewCell.SeparatorStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func separatorColor(_ separatorColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func separatorInset(_ separatorInset: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func allowsMultipleSelection(_ allowsMultipleSelection: Swift.Bool) -> Self
}
extension UIKit.UILabel {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func text(_ text: Swift.String?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func textColor(_ textColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func font(_ font: UIKit.UIFont?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func textAlignment(_ textAlignment: UIKit.NSTextAlignment) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func numberOfLines(_ numberOfLines: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func attributedText(_ attributedText: Foundation.NSAttributedString) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func adjustsFontSizeToFitWidth(_ adjustsFontSizeToFitWidth: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func minimumScaleFactor(_ minimumScaleFactor: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func baselineAdjustment(_ baselineAdjustment: UIKit.UIBaselineAdjustment) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func lineBreakMode(_ lineBreakMode: UIKit.NSLineBreakMode) -> Self
}
public protocol BaseUISetterProtocol : PMOUISetter.Shadow {
}
public protocol Shadow : AnyObject {
}
extension PMOUISetter.Shadow where Self : UIKit.UIView {
  @discardableResult
  public func applySketchShadow(color: UIKit.UIColor = .black, alpha: Swift.Float = 0.5, x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 2, blur: CoreGraphics.CGFloat = 4, spread: CoreGraphics.CGFloat = 0) -> Self
}
extension PMOUISetter.BaseUISetterProtocol where Self : UIKit.UIView {
  @discardableResult
  public func backgroundColor(_ backgroundColor: UIKit.UIColor? = .blue) -> Self
  @discardableResult
  public func cornerRadius(_ cornerRadius: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func alpha(_ alpha: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func isHidden(_ isHidden: Swift.Bool) -> Self
  @discardableResult
  public func isAccessibilityElement(_ isAccessibilityElement: Swift.Bool) -> Self
  @discardableResult
  public func accessibilityIdentifier(_ accessibilityIdentifier: Swift.String?) -> Self
  @discardableResult
  public func isUserInteractionEnabled(_ isUserInteractionEnabled: Swift.Bool) -> Self
  @discardableResult
  public func contentMode(_ mode: UIKit.UIView.ContentMode) -> Self
}
extension UIKit.UIView : PMOUISetter.BaseUISetterProtocol {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func clipsToBounds(_ clipsToBounds: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func masksToBounds(_ masksToBounds: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func borderColor(_ borderColor: CoreGraphics.CGColor) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func borderWidth(_ borderWidth: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func isOpaque(_ isOpaque: Swift.Bool) -> Self
}
extension UIKit.UIStackView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func axis(_ axis: UIKit.NSLayoutConstraint.Axis) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func spacing(_ spacing: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func alignment(_ alignment: UIKit.UIStackView.Alignment) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func distribution(_ distribution: UIKit.UIStackView.Distribution) -> Self
  @available(iOS 14.0, *)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func backgroundColor(_ backgroundColor: UIKit.UIColor) -> Self
}
extension UIKit.UIButton {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func tintColor(_ tintColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func title(_ title: Swift.String?, for state: UIKit.UIControl.State = .normal) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func titleFont(_ titleFont: UIKit.UIFont?) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func titleColor(_ titleColor: UIKit.UIColor, for state: UIKit.UIControl.State = .normal) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func titleShadowColor(_ titleShadowColor: UIKit.UIColor?, for state: UIKit.UIControl.State = .normal) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func image(_ image: UIKit.UIImage?, for state: UIKit.UIControl.State = .normal) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func backgroundImage(_ backgroundImage: UIKit.UIImage?, for state: UIKit.UIControl.State = .normal) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func backgroundColor(_ backgroundColor: UIKit.UIColor, for state: UIKit.UIControl.State = .normal) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addAction(_ target: Any?, action: ObjectiveC.Selector, for controlEvents: UIKit.UIControl.Event) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func contentEdgeInsets(_ contentEdgeInsets: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func titleEdgeInsets(_ titleEdgeInsets: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func imageEdgeInsets(_ imageEdgeInsets: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func contentHorizontalAlignment(_ contentHorizontalAlignment: UIKit.UIControl.ContentHorizontalAlignment) -> Self
  @_Concurrency.MainActor(unsafe) public func bounceAnimation(_ duration: Foundation.TimeInterval = 0.1, _ completion: (() -> Swift.Void)? = nil)
}
extension UIKit.UIScrollView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func showsVerticalScrollIndicator(_ showsVerticalScrollIndicator: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func showsHorizontalScrollIndicator(_ showsHorizontalScrollIndicator: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func contentInset(_ contentInset: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func indicatorStyle(_ indicatorStyle: UIKit.UIScrollView.IndicatorStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func keyboardDismissMode(_ keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode) -> Self
  @available(iOS 11.0, *)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func contentInsetAdjustmentBehavior(_ contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bounces(_ bounces: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func alwaysBounceVertical(_ alwaysBounceVertical: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func alwaysBounceHorizontal(_ alwaysBounceHorizontal: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func isPagingEnabled(_ isPagingEnabled: Swift.Bool) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func isScrollEnabled(_ isScrollEnabled: Swift.Bool) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func isDirectionalLockEnabled(_ isDirectionalLockEnabled: Swift.Bool) -> Self
}
